{"version":3,"sources":["webpack:///./node_modules/element-plus/es/utils/resize-event.js","webpack:///./node_modules/mitt/dist/mitt.es.js","webpack:///./node_modules/element-plus/es/directives/resize/index.js","webpack:///./node_modules/element-plus/es/utils/constants.js","webpack:///./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js","webpack:///./node_modules/element-plus/es/utils/error.js"],"names":["resizeHandler","entries","entry","listeners","target","__resizeListeners__","length","forEach","fn","addResizeListener","element","__ro__","observe","push","removeResizeListener","splice","indexOf","disconnect","all","n","Map","on","t","e","i","get","set","off","emit","slice","map","Resize","el","binding","_handleResize","_a","value","call","UPDATE_MODEL_EVENT","VALIDATE_STATE_MAP","validating","success","error","MapShim","getIndex","arr","key","result","some","index","class_1","this","__entries__","Object","defineProperty","prototype","enumerable","configurable","delete","has","clear","callback","ctx","_i","isBrowser","window","document","global$1","global","Math","self","Function","requestAnimationFrame$1","requestAnimationFrame","bind","setTimeout","Date","now","trailingTimeout","throttle","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","REFRESH_DELAY","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","addObserver","observer","connect_","removeObserver","observers","disconnect_","changesDetected","updateObservers_","activeObservers","filter","gatherActive","hasActive","broadcastActive","addEventListener","attributes","childList","characterData","subtree","removeEventListener","_b","propertyName","isReflowProperty","getInstance","instance_","defineConfigurable","props","keys","writable","getWindowOf","ownerGlobal","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","styles","positions","arguments","reduce","size","position","getPaddings","paddings","positions_1","getSVGContentRect","bbox","getBBox","width","height","getHTMLElementContentRect","clientWidth","clientHeight","getComputedStyle","horizPad","left","right","vertPad","top","bottom","boxSizing","round","isDocumentElement","vertScrollbar","horizScrollbar","abs","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","documentElement","getContentRect","createReadOnlyRect","x","y","Constr","DOMRectReadOnly","rect","create","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","broadcastRect","ResizeObserverEntry","rectInit","contentRect","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","TypeError","callback_","controller_","callbackCtx_","Element","observations","unobserve","clearActive","_this","observation","WeakMap","ResizeObserver","method","apply","ElementPlusError","Error","m","super","name","warn","scope","console"],"mappings":"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","file":"js/chunk-18eb56ea.521ce0ad.js","sourcesContent":["import ResizeObserver from 'resize-observer-polyfill';\nimport isServer from './isServer';\n/* istanbul ignore next */\nconst resizeHandler = function (entries) {\n    for (const entry of entries) {\n        const listeners = entry.target.__resizeListeners__ || [];\n        if (listeners.length) {\n            listeners.forEach((fn) => {\n                fn();\n            });\n        }\n    }\n};\n/* istanbul ignore next */\nexport const addResizeListener = function (element, fn) {\n    if (isServer || !element)\n        return;\n    if (!element.__resizeListeners__) {\n        element.__resizeListeners__ = [];\n        element.__ro__ = new ResizeObserver(resizeHandler);\n        element.__ro__.observe(element);\n    }\n    element.__resizeListeners__.push(fn);\n};\n/* istanbul ignore next */\nexport const removeResizeListener = function (element, fn) {\n    if (!element || !element.__resizeListeners__)\n        return;\n    element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);\n    if (!element.__resizeListeners__.length) {\n        element.__ro__.disconnect();\n    }\n};\n","export default function(n){return{all:n=n||new Map,on:function(t,e){var i=n.get(t);i&&i.push(e)||n.set(t,[e])},off:function(t,e){var i=n.get(t);i&&i.splice(i.indexOf(e)>>>0,1)},emit:function(t,e){(n.get(t)||[]).slice().map(function(n){n(e)}),(n.get(\"*\")||[]).slice().map(function(n){n(t,e)})}}}\n//# sourceMappingURL=mitt.es.js.map\n","import { addResizeListener, removeResizeListener, } from '../../utils/resize-event';\nconst Resize = {\n    beforeMount(el, binding) {\n        el._handleResize = () => {\n            var _a;\n            el && ((_a = binding.value) === null || _a === void 0 ? void 0 : _a.call(binding, el));\n        };\n        addResizeListener(el, el._handleResize);\n    },\n    beforeUnmount(el) {\n        removeResizeListener(el, el._handleResize);\n    },\n};\nexport default Resize;\n","export const UPDATE_MODEL_EVENT = 'update:modelValue';\nexport const CHANGE_EVENT = 'change';\nexport const INPUT_EVENT = 'input';\nexport const VALIDATE_STATE_MAP = {\n    validating: 'el-icon-loading',\n    success: 'el-icon-circle-check',\n    error: 'el-icon-circle-close',\n};\n","/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\r\n/* eslint-disable require-jsdoc, valid-jsdoc */\r\nvar MapShim = (function () {\r\n    if (typeof Map !== 'undefined') {\r\n        return Map;\r\n    }\r\n    /**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */\r\n    function getIndex(arr, key) {\r\n        var result = -1;\r\n        arr.some(function (entry, index) {\r\n            if (entry[0] === key) {\r\n                result = index;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return result;\r\n    }\r\n    return /** @class */ (function () {\r\n        function class_1() {\r\n            this.__entries__ = [];\r\n        }\r\n        Object.defineProperty(class_1.prototype, \"size\", {\r\n            /**\r\n             * @returns {boolean}\r\n             */\r\n            get: function () {\r\n                return this.__entries__.length;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @param {*} key\r\n         * @returns {*}\r\n         */\r\n        class_1.prototype.get = function (key) {\r\n            var index = getIndex(this.__entries__, key);\r\n            var entry = this.__entries__[index];\r\n            return entry && entry[1];\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @param {*} value\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.set = function (key, value) {\r\n            var index = getIndex(this.__entries__, key);\r\n            if (~index) {\r\n                this.__entries__[index][1] = value;\r\n            }\r\n            else {\r\n                this.__entries__.push([key, value]);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.delete = function (key) {\r\n            var entries = this.__entries__;\r\n            var index = getIndex(entries, key);\r\n            if (~index) {\r\n                entries.splice(index, 1);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.has = function (key) {\r\n            return !!~getIndex(this.__entries__, key);\r\n        };\r\n        /**\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.clear = function () {\r\n            this.__entries__.splice(0);\r\n        };\r\n        /**\r\n         * @param {Function} callback\r\n         * @param {*} [ctx=null]\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.forEach = function (callback, ctx) {\r\n            if (ctx === void 0) { ctx = null; }\r\n            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\r\n                var entry = _a[_i];\r\n                callback.call(ctx, entry[1], entry[0]);\r\n            }\r\n        };\r\n        return class_1;\r\n    }());\r\n})();\n\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\r\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n// Returns global object of a current environment.\r\nvar global$1 = (function () {\r\n    if (typeof global !== 'undefined' && global.Math === Math) {\r\n        return global;\r\n    }\r\n    if (typeof self !== 'undefined' && self.Math === Math) {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined' && window.Math === Math) {\r\n        return window;\r\n    }\r\n    // eslint-disable-next-line no-new-func\r\n    return Function('return this')();\r\n})();\n\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\r\nvar requestAnimationFrame$1 = (function () {\r\n    if (typeof requestAnimationFrame === 'function') {\r\n        // It's required to use a bounded function because IE sometimes throws\r\n        // an \"Invalid calling object\" error if rAF is invoked without the global\r\n        // object on the left hand side.\r\n        return requestAnimationFrame.bind(global$1);\r\n    }\r\n    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\r\n})();\n\n// Defines minimum timeout before adding a trailing call.\r\nvar trailingTimeout = 2;\r\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\r\nfunction throttle (callback, delay) {\r\n    var leadingCall = false, trailingCall = false, lastCallTime = 0;\r\n    /**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function resolvePending() {\r\n        if (leadingCall) {\r\n            leadingCall = false;\r\n            callback();\r\n        }\r\n        if (trailingCall) {\r\n            proxy();\r\n        }\r\n    }\r\n    /**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function timeoutCallback() {\r\n        requestAnimationFrame$1(resolvePending);\r\n    }\r\n    /**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function proxy() {\r\n        var timeStamp = Date.now();\r\n        if (leadingCall) {\r\n            // Reject immediately following calls.\r\n            if (timeStamp - lastCallTime < trailingTimeout) {\r\n                return;\r\n            }\r\n            // Schedule new call to be in invoked when the pending one is resolved.\r\n            // This is important for \"transitions\" which never actually start\r\n            // immediately so there is a chance that we might miss one if change\r\n            // happens amids the pending invocation.\r\n            trailingCall = true;\r\n        }\r\n        else {\r\n            leadingCall = true;\r\n            trailingCall = false;\r\n            setTimeout(timeoutCallback, delay);\r\n        }\r\n        lastCallTime = timeStamp;\r\n    }\r\n    return proxy;\r\n}\n\n// Minimum delay before invoking the update of observers.\r\nvar REFRESH_DELAY = 20;\r\n// A list of substrings of CSS properties used to find transition events that\r\n// might affect dimensions of observed elements.\r\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\r\n// Check if MutationObserver is available.\r\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\r\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\r\nvar ResizeObserverController = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserverController.\r\n     *\r\n     * @private\r\n     */\r\n    function ResizeObserverController() {\r\n        /**\r\n         * Indicates whether DOM listeners have been added.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.connected_ = false;\r\n        /**\r\n         * Tells that controller has subscribed for Mutation Events.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.mutationEventsAdded_ = false;\r\n        /**\r\n         * Keeps reference to the instance of MutationObserver.\r\n         *\r\n         * @private {MutationObserver}\r\n         */\r\n        this.mutationsObserver_ = null;\r\n        /**\r\n         * A list of connected observers.\r\n         *\r\n         * @private {Array<ResizeObserverSPI>}\r\n         */\r\n        this.observers_ = [];\r\n        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\r\n        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\r\n    }\r\n    /**\r\n     * Adds observer to observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be added.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.addObserver = function (observer) {\r\n        if (!~this.observers_.indexOf(observer)) {\r\n            this.observers_.push(observer);\r\n        }\r\n        // Add listeners if they haven't been added yet.\r\n        if (!this.connected_) {\r\n            this.connect_();\r\n        }\r\n    };\r\n    /**\r\n     * Removes observer from observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.removeObserver = function (observer) {\r\n        var observers = this.observers_;\r\n        var index = observers.indexOf(observer);\r\n        // Remove observer if it's present in registry.\r\n        if (~index) {\r\n            observers.splice(index, 1);\r\n        }\r\n        // Remove listeners if controller has no connected observers.\r\n        if (!observers.length && this.connected_) {\r\n            this.disconnect_();\r\n        }\r\n    };\r\n    /**\r\n     * Invokes the update of observers. It will continue running updates insofar\r\n     * it detects changes.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.refresh = function () {\r\n        var changesDetected = this.updateObservers_();\r\n        // Continue running updates if changes have been detected as there might\r\n        // be future ones caused by CSS transitions.\r\n        if (changesDetected) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Updates every observer from observers list and notifies them of queued\r\n     * entries.\r\n     *\r\n     * @private\r\n     * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n     *      dimensions of it's elements.\r\n     */\r\n    ResizeObserverController.prototype.updateObservers_ = function () {\r\n        // Collect observers that have active observations.\r\n        var activeObservers = this.observers_.filter(function (observer) {\r\n            return observer.gatherActive(), observer.hasActive();\r\n        });\r\n        // Deliver notifications in a separate cycle in order to avoid any\r\n        // collisions between observers, e.g. when multiple instances of\r\n        // ResizeObserver are tracking the same element and the callback of one\r\n        // of them changes content dimensions of the observed target. Sometimes\r\n        // this may result in notifications being blocked for the rest of observers.\r\n        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\r\n        return activeObservers.length > 0;\r\n    };\r\n    /**\r\n     * Initializes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.connect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already added.\r\n        if (!isBrowser || this.connected_) {\r\n            return;\r\n        }\r\n        // Subscription to the \"Transitionend\" event is used as a workaround for\r\n        // delayed transitions. This way it's possible to capture at least the\r\n        // final state of an element.\r\n        document.addEventListener('transitionend', this.onTransitionEnd_);\r\n        window.addEventListener('resize', this.refresh);\r\n        if (mutationObserverSupported) {\r\n            this.mutationsObserver_ = new MutationObserver(this.refresh);\r\n            this.mutationsObserver_.observe(document, {\r\n                attributes: true,\r\n                childList: true,\r\n                characterData: true,\r\n                subtree: true\r\n            });\r\n        }\r\n        else {\r\n            document.addEventListener('DOMSubtreeModified', this.refresh);\r\n            this.mutationEventsAdded_ = true;\r\n        }\r\n        this.connected_ = true;\r\n    };\r\n    /**\r\n     * Removes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.disconnect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already removed.\r\n        if (!isBrowser || !this.connected_) {\r\n            return;\r\n        }\r\n        document.removeEventListener('transitionend', this.onTransitionEnd_);\r\n        window.removeEventListener('resize', this.refresh);\r\n        if (this.mutationsObserver_) {\r\n            this.mutationsObserver_.disconnect();\r\n        }\r\n        if (this.mutationEventsAdded_) {\r\n            document.removeEventListener('DOMSubtreeModified', this.refresh);\r\n        }\r\n        this.mutationsObserver_ = null;\r\n        this.mutationEventsAdded_ = false;\r\n        this.connected_ = false;\r\n    };\r\n    /**\r\n     * \"Transitionend\" event handler.\r\n     *\r\n     * @private\r\n     * @param {TransitionEvent} event\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\r\n        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;\r\n        // Detect whether transition may affect dimensions of an element.\r\n        var isReflowProperty = transitionKeys.some(function (key) {\r\n            return !!~propertyName.indexOf(key);\r\n        });\r\n        if (isReflowProperty) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Returns instance of the ResizeObserverController.\r\n     *\r\n     * @returns {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.getInstance = function () {\r\n        if (!this.instance_) {\r\n            this.instance_ = new ResizeObserverController();\r\n        }\r\n        return this.instance_;\r\n    };\r\n    /**\r\n     * Holds reference to the controller's instance.\r\n     *\r\n     * @private {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.instance_ = null;\r\n    return ResizeObserverController;\r\n}());\n\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\r\nvar defineConfigurable = (function (target, props) {\r\n    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        Object.defineProperty(target, key, {\r\n            value: props[key],\r\n            enumerable: false,\r\n            writable: false,\r\n            configurable: true\r\n        });\r\n    }\r\n    return target;\r\n});\n\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\r\nvar getWindowOf = (function (target) {\r\n    // Assume that the element is an instance of Node, which means that it\r\n    // has the \"ownerDocument\" property from which we can retrieve a\r\n    // corresponding global object.\r\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\r\n    // Return the local global object if it's not possible extract one from\r\n    // provided element.\r\n    return ownerGlobal || global$1;\r\n});\n\n// Placeholder of an empty content rectangle.\r\nvar emptyRect = createRectInit(0, 0, 0, 0);\r\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\r\nfunction toFloat(value) {\r\n    return parseFloat(value) || 0;\r\n}\r\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\r\nfunction getBordersSize(styles) {\r\n    var positions = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        positions[_i - 1] = arguments[_i];\r\n    }\r\n    return positions.reduce(function (size, position) {\r\n        var value = styles['border-' + position + '-width'];\r\n        return size + toFloat(value);\r\n    }, 0);\r\n}\r\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\r\nfunction getPaddings(styles) {\r\n    var positions = ['top', 'right', 'bottom', 'left'];\r\n    var paddings = {};\r\n    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\r\n        var position = positions_1[_i];\r\n        var value = styles['padding-' + position];\r\n        paddings[position] = toFloat(value);\r\n    }\r\n    return paddings;\r\n}\r\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getSVGContentRect(target) {\r\n    var bbox = target.getBBox();\r\n    return createRectInit(0, 0, bbox.width, bbox.height);\r\n}\r\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getHTMLElementContentRect(target) {\r\n    // Client width & height properties can't be\r\n    // used exclusively as they provide rounded values.\r\n    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;\r\n    // By this condition we can catch all non-replaced inline, hidden and\r\n    // detached elements. Though elements with width & height properties less\r\n    // than 0.5 will be discarded as well.\r\n    //\r\n    // Without it we would need to implement separate methods for each of\r\n    // those cases and it's not possible to perform a precise and performance\r\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\r\n    // gives wrong results for elements with width & height less than 0.5.\r\n    if (!clientWidth && !clientHeight) {\r\n        return emptyRect;\r\n    }\r\n    var styles = getWindowOf(target).getComputedStyle(target);\r\n    var paddings = getPaddings(styles);\r\n    var horizPad = paddings.left + paddings.right;\r\n    var vertPad = paddings.top + paddings.bottom;\r\n    // Computed styles of width & height are being used because they are the\r\n    // only dimensions available to JS that contain non-rounded values. It could\r\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\r\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\r\n    var width = toFloat(styles.width), height = toFloat(styles.height);\r\n    // Width & height include paddings and borders when the 'border-box' box\r\n    // model is applied (except for IE).\r\n    if (styles.boxSizing === 'border-box') {\r\n        // Following conditions are required to handle Internet Explorer which\r\n        // doesn't include paddings and borders to computed CSS dimensions.\r\n        //\r\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\r\n        // properties then it's either IE, and thus we don't need to subtract\r\n        // anything, or an element merely doesn't have paddings/borders styles.\r\n        if (Math.round(width + horizPad) !== clientWidth) {\r\n            width -= getBordersSize(styles, 'left', 'right') + horizPad;\r\n        }\r\n        if (Math.round(height + vertPad) !== clientHeight) {\r\n            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\r\n        }\r\n    }\r\n    // Following steps can't be applied to the document's root element as its\r\n    // client[Width/Height] properties represent viewport area of the window.\r\n    // Besides, it's as well not necessary as the <html> itself neither has\r\n    // rendered scroll bars nor it can be clipped.\r\n    if (!isDocumentElement(target)) {\r\n        // In some browsers (only in Firefox, actually) CSS width & height\r\n        // include scroll bars size which can be removed at this step as scroll\r\n        // bars are the only difference between rounded dimensions + paddings\r\n        // and \"client\" properties, though that is not always true in Chrome.\r\n        var vertScrollbar = Math.round(width + horizPad) - clientWidth;\r\n        var horizScrollbar = Math.round(height + vertPad) - clientHeight;\r\n        // Chrome has a rather weird rounding of \"client\" properties.\r\n        // E.g. for an element with content width of 314.2px it sometimes gives\r\n        // the client width of 315px and for the width of 314.7px it may give\r\n        // 314px. And it doesn't happen all the time. So just ignore this delta\r\n        // as a non-relevant.\r\n        if (Math.abs(vertScrollbar) !== 1) {\r\n            width -= vertScrollbar;\r\n        }\r\n        if (Math.abs(horizScrollbar) !== 1) {\r\n            height -= horizScrollbar;\r\n        }\r\n    }\r\n    return createRectInit(paddings.left, paddings.top, width, height);\r\n}\r\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nvar isSVGGraphicsElement = (function () {\r\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\r\n    // interface.\r\n    if (typeof SVGGraphicsElement !== 'undefined') {\r\n        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\r\n    }\r\n    // If it's so, then check that element is at least an instance of the\r\n    // SVGElement and that it has the \"getBBox\" method.\r\n    // eslint-disable-next-line no-extra-parens\r\n    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&\r\n        typeof target.getBBox === 'function'); };\r\n})();\r\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nfunction isDocumentElement(target) {\r\n    return target === getWindowOf(target).document.documentElement;\r\n}\r\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getContentRect(target) {\r\n    if (!isBrowser) {\r\n        return emptyRect;\r\n    }\r\n    if (isSVGGraphicsElement(target)) {\r\n        return getSVGContentRect(target);\r\n    }\r\n    return getHTMLElementContentRect(target);\r\n}\r\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\r\nfunction createReadOnlyRect(_a) {\r\n    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\r\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\r\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\r\n    var rect = Object.create(Constr.prototype);\r\n    // Rectangle's properties are not writable and non-enumerable.\r\n    defineConfigurable(rect, {\r\n        x: x, y: y, width: width, height: height,\r\n        top: y,\r\n        right: x + width,\r\n        bottom: height + y,\r\n        left: x\r\n    });\r\n    return rect;\r\n}\r\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction createRectInit(x, y, width, height) {\r\n    return { x: x, y: y, width: width, height: height };\r\n}\n\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\r\nvar ResizeObservation = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObservation.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     */\r\n    function ResizeObservation(target) {\r\n        /**\r\n         * Broadcasted width of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastWidth = 0;\r\n        /**\r\n         * Broadcasted height of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastHeight = 0;\r\n        /**\r\n         * Reference to the last observed content rectangle.\r\n         *\r\n         * @private {DOMRectInit}\r\n         */\r\n        this.contentRect_ = createRectInit(0, 0, 0, 0);\r\n        this.target = target;\r\n    }\r\n    /**\r\n     * Updates content rectangle and tells whether it's width or height properties\r\n     * have changed since the last broadcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObservation.prototype.isActive = function () {\r\n        var rect = getContentRect(this.target);\r\n        this.contentRect_ = rect;\r\n        return (rect.width !== this.broadcastWidth ||\r\n            rect.height !== this.broadcastHeight);\r\n    };\r\n    /**\r\n     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n     * from the corresponding properties of the last observed content rectangle.\r\n     *\r\n     * @returns {DOMRectInit} Last observed content rectangle.\r\n     */\r\n    ResizeObservation.prototype.broadcastRect = function () {\r\n        var rect = this.contentRect_;\r\n        this.broadcastWidth = rect.width;\r\n        this.broadcastHeight = rect.height;\r\n        return rect;\r\n    };\r\n    return ResizeObservation;\r\n}());\n\nvar ResizeObserverEntry = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObserverEntry.\r\n     *\r\n     * @param {Element} target - Element that is being observed.\r\n     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n     */\r\n    function ResizeObserverEntry(target, rectInit) {\r\n        var contentRect = createReadOnlyRect(rectInit);\r\n        // According to the specification following properties are not writable\r\n        // and are also not enumerable in the native implementation.\r\n        //\r\n        // Property accessors are not being used as they'd require to define a\r\n        // private WeakMap storage which may cause memory leaks in browsers that\r\n        // don't support this type of collections.\r\n        defineConfigurable(this, { target: target, contentRect: contentRect });\r\n    }\r\n    return ResizeObserverEntry;\r\n}());\n\nvar ResizeObserverSPI = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n     *      when one of the observed elements changes it's content dimensions.\r\n     * @param {ResizeObserverController} controller - Controller instance which\r\n     *      is responsible for the updates of observer.\r\n     * @param {ResizeObserver} callbackCtx - Reference to the public\r\n     *      ResizeObserver instance which will be passed to callback function.\r\n     */\r\n    function ResizeObserverSPI(callback, controller, callbackCtx) {\r\n        /**\r\n         * Collection of resize observations that have detected changes in dimensions\r\n         * of elements.\r\n         *\r\n         * @private {Array<ResizeObservation>}\r\n         */\r\n        this.activeObservations_ = [];\r\n        /**\r\n         * Registry of the ResizeObservation instances.\r\n         *\r\n         * @private {Map<Element, ResizeObservation>}\r\n         */\r\n        this.observations_ = new MapShim();\r\n        if (typeof callback !== 'function') {\r\n            throw new TypeError('The callback provided as parameter 1 is not a function.');\r\n        }\r\n        this.callback_ = callback;\r\n        this.controller_ = controller;\r\n        this.callbackCtx_ = callbackCtx;\r\n    }\r\n    /**\r\n     * Starts observing provided element.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.observe = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is already being observed.\r\n        if (observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.set(target, new ResizeObservation(target));\r\n        this.controller_.addObserver(this);\r\n        // Force the update of observations.\r\n        this.controller_.refresh();\r\n    };\r\n    /**\r\n     * Stops observing provided element.\r\n     *\r\n     * @param {Element} target - Element to stop observing.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.unobserve = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is not being observed.\r\n        if (!observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.delete(target);\r\n        if (!observations.size) {\r\n            this.controller_.removeObserver(this);\r\n        }\r\n    };\r\n    /**\r\n     * Stops observing all elements.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.disconnect = function () {\r\n        this.clearActive();\r\n        this.observations_.clear();\r\n        this.controller_.removeObserver(this);\r\n    };\r\n    /**\r\n     * Collects observation instances the associated element of which has changed\r\n     * it's content rectangle.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.gatherActive = function () {\r\n        var _this = this;\r\n        this.clearActive();\r\n        this.observations_.forEach(function (observation) {\r\n            if (observation.isActive()) {\r\n                _this.activeObservations_.push(observation);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Invokes initial callback function with a list of ResizeObserverEntry\r\n     * instances collected from active resize observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.broadcastActive = function () {\r\n        // Do nothing if observer doesn't have active observations.\r\n        if (!this.hasActive()) {\r\n            return;\r\n        }\r\n        var ctx = this.callbackCtx_;\r\n        // Create ResizeObserverEntry instance for every active observation.\r\n        var entries = this.activeObservations_.map(function (observation) {\r\n            return new ResizeObserverEntry(observation.target, observation.broadcastRect());\r\n        });\r\n        this.callback_.call(ctx, entries, ctx);\r\n        this.clearActive();\r\n    };\r\n    /**\r\n     * Clears the collection of active observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.clearActive = function () {\r\n        this.activeObservations_.splice(0);\r\n    };\r\n    /**\r\n     * Tells whether observer has active observations.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObserverSPI.prototype.hasActive = function () {\r\n        return this.activeObservations_.length > 0;\r\n    };\r\n    return ResizeObserverSPI;\r\n}());\n\n// Registry of internal observers. If WeakMap is not available use current shim\r\n// for the Map collection as it has all required methods and because WeakMap\r\n// can't be fully polyfilled anyway.\r\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\r\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\r\nvar ResizeObserver = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n     *      dimensions of the observed elements change.\r\n     */\r\n    function ResizeObserver(callback) {\r\n        if (!(this instanceof ResizeObserver)) {\r\n            throw new TypeError('Cannot call a class as a function.');\r\n        }\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        var controller = ResizeObserverController.getInstance();\r\n        var observer = new ResizeObserverSPI(callback, controller, this);\r\n        observers.set(this, observer);\r\n    }\r\n    return ResizeObserver;\r\n}());\r\n// Expose public methods of ResizeObserver.\r\n[\r\n    'observe',\r\n    'unobserve',\r\n    'disconnect'\r\n].forEach(function (method) {\r\n    ResizeObserver.prototype[method] = function () {\r\n        var _a;\r\n        return (_a = observers.get(this))[method].apply(_a, arguments);\r\n    };\r\n});\n\nvar index = (function () {\r\n    // Export existing implementation if available.\r\n    if (typeof global$1.ResizeObserver !== 'undefined') {\r\n        return global$1.ResizeObserver;\r\n    }\r\n    return ResizeObserver;\r\n})();\n\nexport default index;\n","class ElementPlusError extends Error {\n    constructor(m) {\n        super(m);\n        this.name = 'ElementPlusError';\n    }\n}\nexport default (scope, m) => {\n    throw new ElementPlusError(`[${scope}] ${m}`);\n};\nexport function warn(scope, m) {\n    console.warn(new ElementPlusError(`[${scope}] ${m}`));\n}\n"],"sourceRoot":""}